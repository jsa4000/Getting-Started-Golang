package jwt

import (
	"webapp/core/net/http/security"
)

const (
	// AuthKey Key to get data from context in basicAuth
	AuthKey security.ContextKey = "jwt-auth-key"

	// BearerPreffix that comes with the Authorization Header
	BearerPreffix = "Bearer "

	// HeaderAuthorization header with the authorization information
	HeaderAuthorization = "Authorization"

	// TokenType toke type generated by this package
	TokenType = "bearer"

	// Registered Claim Names
	// https://tools.ietf.org/html/rfc7519#section-4.1

	// JsontokenIDfield The "jti" claim provides a unique identifier for the JWT.
	// The identifier value MUST be assigned in a manner that ensures that
	// there is a negligible probability that the same value will be
	// accidentally assigned to a different data object; if the application
	// uses multiple issuers, collisions MUST be prevented among values
	// produced by different issuers as well.  The "jti" claim can be used
	// to prevent the JWT from being replayed.  The "jti" value is a case-
	// sensitive string. Use of this claim is OPTIONAL.
	JsontokenIDfield = "jti"

	// IssuerField The "iss" claim identifies the principal that issued the
	// JWT. The processing of this claim is generally application specific.
	// The "iss" value is a case-sensitive string containing a StringOrURI
	// value. Use of this claim is OPTIONAL.
	IssuerField = "iss"

	// SubjectField The "sub" claim identifies the principal that is the
	// subject of the JWT. The claims in a JWT are normally statements
	// about the subject. The subject value MUST either be scoped to be
	// locally unique in the context of the issuer or be globally unique.
	// The processing of this claim is generally application specific. The
	// "sub" value is a case-sensitive string containing a StringOrURI
	// value. Use of this claim is OPTIONAL.
	SubjectField = "sub"

	// AudienceField The "aud" claim identifies the recipients that the JWT is
	// intended for. Each principal intended to process the JWT MUST
	// identify itself with a value in the audience claim. If the principal
	// processing the claim does not identify itself with a value in the
	// "aud" claim when this claim is present, then the JWT MUST be
	// rejected. In the general case, the "aud" value is an array of case-
	// sensitive strings, each containing a StringOrURI value. In the
	// special case when the JWT has one audience, the "aud" value MAY be a
	// single case-sensitive string containing a StringOrURI value.  The
	// interpretation of audience values is generally application specific.
	// Use of this claim is OPTIONAL.
	AudienceField = "aud"

	// ExpirationTimeField The "exp" claim identifies the expiration time on
	// or after which the JWT MUST NOT be accepted for processing. The
	// processing of the "exp" claim requires that the current date/time
	// MUST be before the expiration date/time listed in the "exp" claim.
	// Implementers MAY provide for some small leeway, usually no more than
	// a few minutes, to account for clock skew. Its value MUST be a number
	// containing a NumericDate value.  Use of this claim is OPTIONAL.
	ExpirationTimeField = "exp"

	// IssuedAtField The "iat" claim identifies the time at which the JWT was
	// issued.  This claim can be used to determine the age of the JWT.  Its
	// value MUST be a number containing a NumericDate value.  Use of this
	// claim is OPTIONAL.
	IssuedAtField = "iat"

	// NotBeforeField The "nbf" claim identifies the time before which the JWT
	// MUST NOT be accepted for processing.  The processing of the "nbf"
	// claim requires that the current date/time MUST be after or equal to
	// the not-before date/time listed in the "nbf" claim.  Implementers MAY
	// provide for some small leeway, usually no more than a few minutes, to
	// account for clock skew.  Its value MUST be a number containing a
	// NumericDate value.  Use of this claim is OPTIONAL.
	NotBeforeField = "nbf"

	// Customs Claim Names

	// UserNameField user name for this token
	UserNameField = "username"

	// EmailField authorized email for this token
	EmailField = "email"

	// ScopesField allowed scopes for JWT
	ScopesField = "scopes"

	// RolesField allowed roles for JWT
	RolesField = "roles"
)
